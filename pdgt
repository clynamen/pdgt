#!/usr/bin/python

    #This file is part of PDGT.  
#
    #PDGT is free software: you can redistribute it and/or modify
    #it under the terms of the GNU General Public License as published by
    #the Free Software Foundation, either version 3 of the License, or
    #(at your option) any later version.
#
    #PDGT is distributed in the hope that it will be useful,
    #but WITHOUT ANY WARRANTY; without even the implied warranty of
    #MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    #GNU General Public License for more details.
#
    #You should have received a copy of the GNU General Public License
    #along with PDGT.  If not, see <http://www.gnu.org/licenses/>.


####
# \class translator translate the give text via google
# translate
####

from urllib.parse import urlparse
import urllib.request
import urllib
import re

class Translator:
  ''' translator translate the given text '''

  _user_agent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7'
  _headers={'User-Agent':_user_agent,}
  _regA = re.compile('(?<=\[\[\[").*')
  _regB = re.compile('.*(?=","",""]])')
  _regC = re.compile('.*(?=",")')
  _regD = re.compile('(?<=\]\],\[\[").*')
  _regE = re.compile('.*(?="\]\]\])')
  _regF = re.compile('",\["')
  _regG = re.compile('","')
  _regH = re.compile('"\]\],\["')

  def __init__(self, inlang, outlang):
    self._inlang = inlang
    self._outlang = outlang

  def _downloadTranslation(self, text):
    text = urllib.parse.quote(text)
    url = 'http://translate.google.com/translate_a/t?client=t&text={0}%0A%0A&hl={2}&sl={1}&tl={2}'.format(
        text,self._inlang,self._outlang)
    request=urllib.request.Request(url,None,Translator._headers)
    response = urllib.request.urlopen(request)
    data = response.read()
    translationPage = data.decode("utf-8")
    return translationPage

  def _parseFirstTranslation(self, translationPage):
    res = Translator._regA.search(translationPage)
    translation = res.group()
    res = Translator._regB.search(translation)
    translation = res.group()
    res = Translator._regC.search(translation)
    translation = res.group()
    return translation

  def _parseAlternativeTranslation(self, translationPage):
    res = Translator._regD.search(translationPage)
    if res == None :
      return ''
    res = Translator._regE.search(res.group())
    if res == None :
      return ''
    res = Translator._regF.sub(': ', res.group())
    res = Translator._regG.sub(', ', res)
    alternative = Translator._regH.sub(' | ', res)
    return alternative

  def translate(self, text):
    translationPage = self._downloadTranslation(text)
    firstTranslation = self._parseFirstTranslation(translationPage)
    alternativeTranslation = self._parseAlternativeTranslation(translationPage)
    if len(alternativeTranslation) != 0 :
      translation = firstTranslation + ' -- ' + alternativeTranslation 
    else:
      translation = firstTranslation
    return translation



import sys
from tkinter import *
from optparse import OptionParser

usage = "usage: %prog [options] arg1\n\n Right click on bar to retrive translation of the mouse selection"
version = "prog 0.1"
parser = OptionParser(usage=usage, version=version)
parser.add_option("-w", "--width", dest="width", default=100,
                      help="set the width of the window in character units", type="int")
parser.add_option("-x", "--xposition", dest="x", default=0,
                      help="set the horizontal position of the window in pixel", type="int")
parser.add_option("-y", "--yposition", dest="y", default=0,
                      help="set the vertical position of the window in pixel", type="int")
parser.add_option("-b", "--background", dest="bg", default="#FFFFFF",
                      help="set the background color e.g. #RRGGBB ", type="string")
parser.add_option("-f", "--foreground", dest="fg", default="#000000",
                      help="set the foreground color e.g. #RRGGBB", type="string")
parser.add_option("-i", "--inputlanguage", dest="il", default="auto",
                      help="set the input language, default is auto. e.g. 'en' 'it' 'de'", type="string")
parser.add_option("-o", "--outputlanguage", dest="ol", default="en",
                      help="set the output language, default is en. e.g. 'en' 'it' 'de'", type="string")

(options, args) = parser.parse_args()
  
root = Tk()
root.geometry("+{0}+{1}".format(options.x,options.y))
text = StringVar()
translator = Translator(options.il, options.ol)

def callback(event):
  data = event.widget.selection_get(selection="PRIMARY")
  data = translator.translate(data)
  text.set(data)

entry = Entry(root, state="readonly", width=options.width, textvariable=text, 
    fg=options.fg, bg=options.bg, disabledforeground=options.fg,
    disabledbackground=options.bg, highlightbackground=options.bg,
    highlightcolor=options.bg, readonlybackground=options.bg)
entry.pack_propagate(0)
entry.pack()

root.bind("<Button-3>", callback)

root.mainloop()

